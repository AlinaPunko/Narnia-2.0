{"version":3,"sources":["webpack:///./src/helpers/requestHelper.js"],"names":["get","url","fetch","method","accept","credentials","headers","Headers","Authorization","localStorageHelper","getToken","then","response","status","error","Error","statusText","code","json","message","contentType","includes","text","catch","post","data","body","JSON","stringify","console","log","c","put","deleteRequest"],"mappings":"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","file":"main.321ffb83be10a0cb10a0.hot-update.js","sourcesContent":["import localStorageHelper from 'helpers/localStorageHelper';\r\n\r\nfunction get(url) {\r\n    return fetch(url, {\r\n        method: 'GET',\r\n        accept: 'application/json',\r\n        credentials: 'include',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorageHelper.getToken()}`\r\n        })\r\n    })\r\n        .then(async (response) => {\r\n            if (response.status !== 200) {\r\n                const error = new Error(response.statusText);\r\n                error.code = response.status;\r\n                error.message = await response.json();\r\n                return error;\r\n            }\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                return response.json();\r\n            }\r\n            return response.text();\r\n        })\r\n        .catch((error) => new Error(`Network Error!${error}`));\r\n}\r\n\r\nfunction post(url, data) {\r\n    return fetch(url, {\r\n        method: 'POST',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorageHelper.getToken()}`\r\n        }),\r\n        accept: 'application/json',\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async (response) => {\r\n            if (response.status !== 200) {\r\n                const error = new Error(response.statusText);\r\n                console.log(error);\r\n                error.code = response.status;\r\n                const c = await response.json();\r\n                console.log(c);\r\n                error.message = c;\r\n                return error;\r\n            }\r\n\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                return response.json();\r\n            }\r\n            return response.text();\r\n        })\r\n        .catch((error) => new Error(`Network Error!${error}`));\r\n}\r\n\r\nfunction put(url, data) {\r\n    return fetch(url, {\r\n        method: 'PUT',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorageHelper.getToken()}`\r\n        }),\r\n        accept: 'application/json',\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async (response) => {\r\n            if (response.status !== 200) {\r\n                const error = new Error(response.statusText);\r\n                error.code = response.status;\r\n                error.message = await response.json();\r\n                return error;\r\n            }\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                return response.json();\r\n            }\r\n            return response.text();\r\n        })\r\n        .catch((error) => new Error(`Network Error!${error}`));\r\n}\r\n\r\nfunction deleteRequest(url, data) {\r\n    return fetch(url, {\r\n        method: 'DELETE',\r\n        headers: new Headers({\r\n            'Content-Type': 'application/json',\r\n            Authorization: `Bearer ${localStorageHelper.getToken()}`\r\n        }),\r\n        accept: 'application/json',\r\n        credentials: 'include',\r\n        body: JSON.stringify(data)\r\n    })\r\n        .then(async (response) => {\r\n            if (response.status !== 200) {\r\n                const error = new Error(response.statusText);\r\n                error.code = response.status;\r\n                error.message = await response.json();\r\n                return error;\r\n            }\r\n            const contentType = response.headers.get('content-type');\r\n            if (contentType && contentType.includes('application/json')) {\r\n                return response.json();\r\n            }\r\n            return response.text();\r\n        })\r\n        .catch((error) => new Error(`Network Error!${error}`));\r\n}\r\n\r\nexport default {\r\n    get, post, put, deleteRequest\r\n};\r\n"],"sourceRoot":""}